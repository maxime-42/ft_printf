WARNING: The return values reported here may be bugged on some systems.
          See https://github.com/gavinfielder/pft/issues/11
          Run in non-fork mode (-X) to ensure accurate return value
          reporting, set IGNORE_RETURN_VALUE=1 in options-config.ini,
          or run test_pipes.sh to see if your system has this bug.
          This bug does not affect the pass/fail result of a test, nor
          the function output--only the reported return value.


Test 438 (p_width_fit) : FAILED.
    First line of code: {return test("%70p%70p%70p%70p%70p%70p%70p%70p%70p%70p%70p%70p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10,&a11,&a12);      expected return value : 1012
      your return value     : 1012
      expected output : "                                                           0x10c992288                                                           0x10c992289          "
      your output     : "                                                           0x10c992288                                                           0x10c992289          "
      expected (nonprintable as hex) : "                                                           0x10c992288                                                           0x10c992289          "
      actual   (nonprintable as hex) : "                                                           0x10c992288                                                           0x10c992289          "

Test 443 (p_width_fit_lj) : FAILED.
    First line of code: {return test("%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p%-70p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10      expected return value : 1012
      your return value     : 1012
      expected output : "0x10c992288                                                           0x10c992289                                                           0x10c99228"
      your output     : "                                                           0x10c992288                                                           0x10c992289          "
      expected (nonprintable as hex) : "0x10c992288                                                           0x10c992289                                                           0x10c99228"
      actual   (nonprintable as hex) : "                                                           0x10c992288                                                           0x10c992289          "

Test 445 (p_width_16_lj) : FAILED.
    First line of code: {return test("%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p%-16p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10      expected return value : 222
      your return value     : 222
      expected output : "0x10c992288     0x10c992289     0x10c99228a     0x10c99228c     0x10c992290     0x10c992294     0x10c992298     0x10c9922a0     0x10c9922a8     0x10c9"
      your output     : "     0x10c992288     0x10c992289     0x10c99228a     0x10c99228c     0x10c992290     0x10c992294     0x10c992298     0x10c9922a0     0x10c9922a8     0"
      expected (nonprintable as hex) : "0x10c992288     0x10c992289     0x10c99228a     0x10c99228c     0x10c992290     0x10c992294     0x10c992298     0x10c9922a0     0x10c9922a8     0x10c9"
      actual   (nonprintable as hex) : "     0x10c992288     0x10c992289     0x10c99228a     0x10c99228c     0x10c992290     0x10c992294     0x10c992298     0x10c9922a0     0x10c9922a8     0"

Test 447 (p_width_32_lj) : FAILED.
    First line of code: {return test("%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p%-32p",&a01,&a02,&a03,&a04,&a05,&a06,&a07,&a08,&a09,&a10      expected return value : 455
      your return value     : 455
      expected output : "0x10c992288                     0x10c992289                     0x10c99228a                     0x10c99228c                     0x10c992290           "
      your output     : "                     0x10c992288                     0x10c992289                     0x10c99228a                     0x10c99228c                     0"
      expected (nonprintable as hex) : "0x10c992288                     0x10c992289                     0x10c99228a                     0x10c99228c                     0x10c992290           "
      actual   (nonprintable as hex) : "                     0x10c992288                     0x10c992289                     0x10c99228a                     0x10c99228c                     0"

Test 635 (moul_d_7) : FAILED.
    First line of code: {return test("%d", INT_MIN);}
      expected return value : 12
      your return value     : 22
      expected output : "-2147483648"
      your output     : "18446744071562067968"
      expected (nonprintable as hex) : "-2147483648"
      actual   (nonprintable as hex) : "18446744071562067968"

Test 637 (moul_d_9) : FAILED.
    First line of code: {return test("%d", INT_MAX + 1);}
      expected return value : 12
      your return value     : 22
      expected output : "-2147483648"
      your output     : "18446744071562067968"
      expected (nonprintable as hex) : "-2147483648"
      actual   (nonprintable as hex) : "18446744071562067968"

Test 643 (moul_c_2) : FAILED.
    First line of code: {return test("Kashim a %c histoires Ã  raconter", 1001);}
      expected return value : 35
      your return value     : 25
      expected output : "Kashim a é histoires Ã  raconter"
      your output     : "é histoires Ã  raconter"
      expected (nonprintable as hex) : "Kashim a \xe9 histoires \xc3\xa0 raconter"
      actual   (nonprintable as hex) : "\xe9 histoires \xc3\xa0 raconter"

Test 644 (moul_c_3) : FAILED.
    First line of code: {return test("Il fait au moins %c
", -8000);}
      expected return value : 20
      your return value     : 2
      expected output : "Il fait au moins À
"
      your output     : "À
"
      expected (nonprintable as hex) : "Il fait au moins \xc0\x0a"
      actual   (nonprintable as hex) : "\xc0\x0a"

Test 677 (moul_i_7) : FAILED.
    First line of code: {return test("%i", INT_MIN);}
      expected return value : 12
      your return value     : 22
      expected output : "-2147483648"
      your output     : "18446744071562067968"
      expected (nonprintable as hex) : "-2147483648"
      actual   (nonprintable as hex) : "18446744071562067968"

Test 679 (moul_i_9) : FAILED.
    First line of code: {return test("%i", INT_MAX + 1);}
      expected return value : 12
      your return value     : 22
      expected output : "-2147483648"
      your output     : "18446744071562067968"
      expected (nonprintable as hex) : "-2147483648"
      actual   (nonprintable as hex) : "18446744071562067968"

Test 716 (moul_leftjusty_2) : FAILED.
    First line of code: {return test("%%-d 42 == %-d
", INT_MIN);}
      expected return value : 24
      your return value     : 34
      expected output : "%-d 42 == -2147483648
"
      your output     : "%-d 42 == 18446744071562067968
"
      expected (nonprintable as hex) : "%-d 42 == -2147483648\x0a"
      actual   (nonprintable as hex) : "%-d 42 == 18446744071562067968\x0a"

Test 739 (new2019_negstar_4) : FAILED.
    First line of code: {return test("%.*s", -3, "hello");}
      expected return value : 5
      your return value     : 0
      expected output : "hello"
      your output     : ""
      expected (nonprintable as hex) : "hello"
      actual   (nonprintable as hex) : ""

Test 740 (new2019_negstar_5) : FAILED.
    First line of code: {return test("%-*.*s", -7, -3, "yolo");}
      expected return value : 7
      your return value     : 7
      expected output : "yolo   "
      your output     : "       "
      expected (nonprintable as hex) : "yolo   "
      actual   (nonprintable as hex) : "       "

Test 744 (new2019_negstar_9) : FAILED.
    First line of code: {return test("%0*i", -7, -54);}
      expected return value : 7
      your return value     : 7
      expected output : "-54    "
      your output     : "-540000"
      expected (nonprintable as hex) : "-54    "
      actual   (nonprintable as hex) : "-540000"

